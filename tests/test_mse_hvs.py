from itertools import product

import numpy as np
from numpy.testing import assert_almost_equal, assert_array_almost_equal
from scipy.fft import dctn as sp_dctn

from psnr_hvsm import hvs_mse, hvs_mse_tile

CSF_COEFF = np.array([[1.608443, 2.339554, 2.573509, 1.608443, 1.072295, 0.643377, 0.504610, 0.421887],
                      [2.144591, 2.144591, 1.838221, 1.354478, 0.989811, 0.443708, 0.428918, 0.467911],
                      [1.838221, 1.979622, 1.608443, 1.072295, 0.643377, 0.451493, 0.372972, 0.459555],
                      [1.838221, 1.513829, 1.169777, 0.887417, 0.504610, 0.295806, 0.321689, 0.415082],
                      [1.429727, 1.169777, 0.695543, 0.459555, 0.378457, 0.236102, 0.249855, 0.334222],
                      [1.072295, 0.735288, 0.467911, 0.402111, 0.317717, 0.247453, 0.227744, 0.279729],
                      [0.525206, 0.402111, 0.329937, 0.295806, 0.249855, 0.212687, 0.214459, 0.254803],
                      [0.357432, 0.279729, 0.270896, 0.262603, 0.229778, 0.257351, 0.249855, 0.25995]])


def _hvs_mse_tile_py(a, b):
    a_dct = sp_dctn(a, type=2, norm='ortho')
    b_dct = sp_dctn(b, type=2, norm='ortho')
    dif = np.abs(a_dct - b_dct)

    return np.sum(np.power(dif*CSF_COEFF, 2)) / CSF_COEFF.size


def _hvs_mse_py(a, b):
    blocks_y, blocks_x = a.shape[0] // 8, a.shape[1] // 8
    mse_per_tile = np.zeros((blocks_y, blocks_x), dtype=float)
    for y, x in product(range(0, blocks_y*8, 8), range(0, blocks_x*8, 8)):
        mse_per_tile[y//8, x//8] = _hvs_mse_tile_py(a[y:y+8, x:x+8], b[y:y+8, x:x+8])
    return mse_per_tile


def test_hvs_mse_tile_matches_implementation_using_scipy():
    o = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                  [0.,  0., 13., 15., 10., 15.,  5.,  0.],
                  [0.,  3., 15.,  2.,  0., 11.,  8.,  0.],
                  [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                  [0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],
                  [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                  [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                  [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.
    o_d = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                    [0.,  0., 13., 10., 10., 15.,  5.,  0.],
                    [0.,  3., 15.,  2.,  0., 9.,  9.,  0.],
                    [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                    [0.,  5.,  9.,  0.,  0.,  9.,  8.,  0.],
                    [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                    [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                    [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.

    a = hvs_mse_tile(o, o_d)
    b = _hvs_mse_tile_py(o, o_d)
    assert_almost_equal(a, b)


def test_hvs_mse_matches_implementation_using_scipy():
    o = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                  [0.,  0., 13., 15., 10., 15.,  5.,  0.],
                  [0.,  3., 15.,  2.,  0., 11.,  8.,  0.],
                  [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                  [0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],
                  [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                  [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                  [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.
    o_d = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                    [0.,  0., 13., 10., 10., 15.,  5.,  0.],
                    [0.,  3., 15.,  2.,  0., 9.,  9.,  0.],
                    [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                    [0.,  5.,  9.,  0.,  0.,  9.,  8.,  0.],
                    [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                    [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                    [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.

    o = np.tile(o, (2, 3))
    o_d = np.tile(o_d, (2, 3))

    a = hvs_mse(o, o_d)
    b = _hvs_mse_py(o, o_d)
    assert_array_almost_equal(a, b)
