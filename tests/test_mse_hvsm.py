from itertools import product

import numpy as np
from numpy.testing import assert_almost_equal, assert_array_almost_equal
from scipy.fft import dctn as sp_dctn

from psnr_hvsm import hvsm_mse, hvsm_mse_tile, masking

CSF_COEFF = np.array([[1.608443, 2.339554, 2.573509, 1.608443, 1.072295, 0.643377, 0.504610, 0.421887],
                      [2.144591, 2.144591, 1.838221, 1.354478, 0.989811, 0.443708, 0.428918, 0.467911],
                      [1.838221, 1.979622, 1.608443, 1.072295, 0.643377, 0.451493, 0.372972, 0.459555],
                      [1.838221, 1.513829, 1.169777, 0.887417, 0.504610, 0.295806, 0.321689, 0.415082],
                      [1.429727, 1.169777, 0.695543, 0.459555, 0.378457, 0.236102, 0.249855, 0.334222],
                      [1.072295, 0.735288, 0.467911, 0.402111, 0.317717, 0.247453, 0.227744, 0.279729],
                      [0.525206, 0.402111, 0.329937, 0.295806, 0.249855, 0.212687, 0.214459, 0.254803],
                      [0.357432, 0.279729, 0.270896, 0.262603, 0.229778, 0.257351, 0.249855, 0.25995]])

MASK_COEFF = np.array([[0.390625, 0.826446, 1.000000, 0.390625, 0.173611, 0.062500, 0.038447, 0.026874],
                       [0.694444, 0.694444, 0.510204, 0.277008, 0.147929, 0.029727, 0.027778, 0.033058],
                       [0.510204, 0.591716, 0.390625, 0.173611, 0.062500, 0.030779, 0.021004, 0.031888],
                       [0.510204, 0.346021, 0.206612, 0.118906, 0.038447, 0.013212, 0.015625, 0.026015],
                       [0.308642, 0.206612, 0.073046, 0.031888, 0.021626, 0.008417, 0.009426, 0.016866],
                       [0.173611, 0.081633, 0.033058, 0.024414, 0.015242, 0.009246, 0.007831, 0.011815],
                       [0.041649, 0.024414, 0.016437, 0.013212, 0.009426, 0.006830, 0.006944, 0.009803],
                       [0.01929, 0.0118150, 0.011080, 0.010412, 0.007972, 0.010000, 0.009426, 0.010203]])


def _vari(a):
    return np.var(a, ddof=1) * a.size


def _masking_py(a, adct):
    m = np.sum(np.power(adct.flat[1:], 2) * MASK_COEFF.flat[1:])

    var = _vari(a)

    if var != 0:
        var = (_vari(a[0:4, 0:4]) +
               _vari(a[4:8, 0:4]) +
               _vari(a[0:4, 4:8]) +
               _vari(a[4:8, 4:8])) / var

    return np.sqrt(m*var) / 32.0


def _hvsm_mse_tile_py(a, b):
    a_dct = sp_dctn(a, type=2, norm='ortho')
    b_dct = sp_dctn(b, type=2, norm='ortho')
    mask_a = _masking_py(a, a_dct)
    mask_b = _masking_py(b, b_dct)

    if mask_b > mask_a:
        mask_a = mask_b

    dif = np.abs(a_dct - b_dct)
    weighted_mse = (CSF_COEFF[0, 0]*dif[0, 0])**2
    mask = np.power(MASK_COEFF, -1) * mask_a
    masked_dct = (np.where(dif >= mask, dif-mask, 0.0) * CSF_COEFF).flat[1:]
    masked_dct_sq = np.power(masked_dct, 2)
    weighted_mse += np.sum(masked_dct_sq)

    return weighted_mse / 64


def _hvsm_mse_py(a, b):
    blocks_y, blocks_x = a.shape[0] // 8, a.shape[1] // 8
    mse_per_tile = np.zeros((blocks_y, blocks_x), dtype=float)
    for y, x in product(range(0, blocks_y*8, 8), range(0, blocks_x*8, 8)):
        mse_per_tile[y//8, x//8] = _hvsm_mse_tile_py(a[y:y+8, x:x+8], b[y:y+8, x:x+8])
    return mse_per_tile


def test_masking_is_equivalent_to_python_version():
    o = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                  [0.,  0., 13., 15., 10., 15.,  5.,  0.],
                  [0.,  3., 15.,  2.,  0., 11.,  8.,  0.],
                  [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                  [0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],
                  [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                  [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                  [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.

    odct = sp_dctn(o)

    a = masking(o, odct)
    b = _masking_py(o, odct)

    assert_almost_equal(a, b)


def test_hvsm_mse_tile_matches_implementation_using_scipy():
    o = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                  [0.,  0., 13., 15., 10., 15.,  5.,  0.],
                  [0.,  3., 15.,  2.,  0., 11.,  8.,  0.],
                  [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                  [0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],
                  [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                  [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                  [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.
    o_d = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                    [0.,  0., 13., 10., 10., 15.,  5.,  0.],
                    [0.,  3., 15.,  2.,  0., 9.,  9.,  0.],
                    [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                    [0.,  5.,  9.,  0.,  0.,  9.,  8.,  0.],
                    [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                    [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                    [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.

    a = hvsm_mse_tile(o, o_d)
    b = _hvsm_mse_tile_py(o, o_d)
    assert_almost_equal(a, b)


def test_hvsm_mse_matches_implementation_using_scipy():
    o = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                  [0.,  0., 13., 15., 10., 15.,  5.,  0.],
                  [0.,  3., 15.,  2.,  0., 11.,  8.,  0.],
                  [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                  [0.,  5.,  8.,  0.,  0.,  9.,  8.,  0.],
                  [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                  [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                  [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.
    o_d = np.array([[0.,  0.,  5., 13.,  9.,  1.,  0.,  0.],
                    [0.,  0., 13., 10., 10., 15.,  5.,  0.],
                    [0.,  3., 15.,  2.,  0., 9.,  9.,  0.],
                    [0.,  4., 12.,  0.,  0.,  8.,  8.,  0.],
                    [0.,  5.,  9.,  0.,  0.,  9.,  8.,  0.],
                    [0.,  4., 11.,  0.,  1., 12.,  7.,  0.],
                    [0.,  2., 14.,  5., 10., 12.,  0.,  0.],
                    [0.,  0.,  6., 13., 10.,  0.,  0.,  0.]]) / 16.

    o = np.tile(o, (2, 3))
    o_d = np.tile(o_d, (2, 3))

    a = hvsm_mse(o, o_d)
    b = _hvsm_mse_py(o, o_d)
    assert_array_almost_equal(a, b)
